if number % 3 == 0 and number % 5 == 0:
    print('fizzbuzz') 
    
elif number % 3 == 0:
    print('fizz')

elif number % 5 == 0:
    print('buzz')

else:
    print(number)



 #!/usr/bin/env python3
    2 
    3 def steg_encode_char(char, cover):
    4     charbin = format(ord(char), '0>8b')
    5     for index in range (0,len(cover)):
    6         coverbinl = list(format(int(cover[index]), '0>8b'))
    7         print (coverbinl)
    8         coverbinl [-1] = charbin[index]
    9         cover[index] = str(int(''.join(coverbinl),2))
   10     pass
   11 
   12 def steg_decode_char(stego):
   13     msgbits = []
   14     for b in stego:
   15         msgbits.append(bin(int(b))[-1])
   16     return chr(int(''.join(msgbits),2))
   17     pass
   18 
   19 if __name__ == '__main__':
   20     pass
  ~                                            



#!/usr/bin/env python3
    2 
    3 def guess_number(n):
    4     guess = int(input('Guess a number: '))
    5     while guess != n:
    6             if guess < n:
    7                 guess = int(input('Too low, enter a new number: '))
    8 
    9             elif guess > n:
   10                 guess = int(input('Too high, enter a new number: '))
   11 
   12             else:
   13                 break
   14 
   15     print('WIN')
   16 
   17 pass
   18 
   19 guess_number(23)





1 #!/usr/bin/env python3
    2 
    3 def invert(l):
    4     '''for n in range(0,len(l)):
    5     l[n] = str(255 - int(l[n]))'''
    6     
    7     '''counts = 0
    8     for num in l:
    9     l[counts] = str(255-int(num))
   10     counts += 1'''
   11     for count, value in enumertate(l):
   12         l[count] = str(255 - int(value))
   13         pass
   14 
   15 def inverted(l):
   16     result = []
   17     for n in l:
   18         result.append(str(255 - int(n)))
   19         return result
   20     pass
   21 
   22 if __name__ == '__main__':
   23     pass
1 #!/usr/bin/env python3
    2 
    3 def q1(floatstr):
    4     '''
    5     TLO: 112-SCRPY002, LSA 3,4
    6     Given the floatstr, which is a comma separated string of
    7     floats, return a list with each of the floats in the 
    8     argument as elements in the list.
    9     '''
   10     newlist = []
   11     for y in floatstr.split(','):
   12         newlist.append(float(y))
   13     return(newlist)
   14     pass
   15     '''return [float(x) for x in floatstr.split(',')]'''
   16 
   17 def q2(*args):
   18     '''
   19     TLO: 112-SCRPY006, LSA 3
   20     TLO: 112-SCRPY007, LSA 4
   21     Given the variable length argument list, return the average
   22     of all the arguments as a float
   23     '''
   24     l = [*args]
   25     sum(l)
   26     len(l)
   27     avg = float(sum(l))/len(l)
   28     return(avg)
   29     pass
   30 
   31 def q3(lst,n):
   32     '''
   33     TLO: 112-SCRPY004, LSA 3
   34     Given a list (lst) and a number of items (n), return a new 
   35     list containing the last n entries in lst.
   36     '''#return lst[-n:]
   37     return lst[-n:len(lst)]
   38     pass
   39 
   40 def q4(strng):
   41     '''
   42     TLO: 112-SCRPY004, LSA 1,2
   43     TLO: 112-SCRPY006, LSA 3
   44     Given an input string, return a list containing the ordinal numbers of 
   45     each character in the string in the order found in the input string.
   46     '''
   47     newlist = []
   48     for i in list(strng):
   49         newlist.append(ord(i))
   50     return newlist
   51     pass
 52 def q5(strng):
   53     '''
   54     TLO: 112-SCRPY002, LSA 1,3
   55     TLO: 112-SCRPY004, LSA 2
   56     Given an input string, return a tuple with each element in the tuple
   57     containing a single word from the input string in order.
   58     '''
   59     return tuple(strng.split())
   60     pass
   61 
   62 def q6(catalog, order):
   63     '''
   64     TLO: 112-SCRPY007, LSA 2
   65     Given a dictionary (catalog) whose keys are product names and values are product
   66     prices per unit and a list of tuples (order) of product names and quantities,
   67     compute and return the total value of the order.
   68 
   69     Example catalog:
   70     {
   71         'AMD Ryzen 5 5600X': 289.99,
   72         'Intel Core i9-9900K': 363.50,
   73         'AMD Ryzen 9 5900X': 569.99
   74     }
   75 
   76     Example order:
   77     [
   78         ('AMD Ryzen 5 5600X', 5), 
   79         ('Intel Core i9-9900K', 3)
   80     ]
   81 
   82     Example result:
   83     2540.45 
   84 
   85     How the above result was computed:
   86     (289.99 * 5) + (363.50 * 3)
   87     '''
   88     #total = []
   89     #for key in catalog:
   90         #for item i order:
   91             #if item[0] == key:
   92                 #total.append(catalog[key] * itme [1]
   93                         # return sum(total)
   94 
   95     total = []
   96     for product, price in catalog.items():
   97        for orderp, quantity in order:
   98            if product == orderp:
   99                 total.append(quantity * price)
  100     return sum(total)
  101     pass
  102 ''' 7 = 100%'''
103 def q7(filename):
  104     '''
  105     TLO: 112-SCRPY005, LSA 1
  106     Given a filename, open the file and return the length of the first line 
  107     in the file excluding the line terminator.
  108     '''
  109     with open('filename','r') as fp:
  110         f = fp.readline()
  111         s = f.strip()
  112         print(s)
  113         return(len(s))
  114     pass
  115 
  116 def q8(filename,lst):
  117     '''
  118     TLO: 112-SCRPY003, LSA 1
  119     TLO: 112-SCRPY004, LSA 1,2
  120     TLO: 112-SCRPY005, LSA 1
  121     Given a filename and a list, write each entry from the list to the file
  122     on separate lines until a case-insensitive entry of "stop" is found in 
  123     the list. If "stop" is not found in the list, write the entire list to 
  124     the file on separate lines.
  125     '''
  126     with open(filename,'w') as fp:
  127         for item in lst:
  128             if item.lower() == 'stop':
  129                 break
  130             fp.write(f'{item}\n')
  131 
  132     pass
  133 
134 def q9(miltime):
  135     '''
  136     TLO: 112-SCRPY003, LSA 1
  137     Given the military time in the argument miltime, return a string 
  138     containing the greeting of the day.
  139     0300-1159 "Good Morning"
  140     1200-1559 "Good Afternoon"
  141     1600-2059 "Good Evening"
  142     2100-0259 "Good Night"
  143     '''
  144     if miltime >= 300 and miltime < 1200:
  145         return "Good Morning"
  146     elif miltime >= 1200 and miltime <1600:
  147         return "Good Afternoon"
  148     elif miltime >= 1600 and miltime < 2100:
  149         return "Good Evening"
  150     else:
  151         miltime >= 2100 and miltime < 300
  152         return "Good Night"
  153     pass
  154 
  155 '''10 = 40-80%'''
  156 def q10(numlist):
  157     '''
  158     TLO: 112-SCRPY003, LSA 1
  159     TLO: 112-SCRPY004, LSA 1
  160     Given the argument numlist as a list of numbers, return True if all 
  161     numbers in the list are NOT negative. If any numbers in the list are
  162     negative, return False.
  163     '''
  164     for i in numlist:
  165         if i < 0:
  166             return False
  167         else:
  168             return True
  169     pass
  170 



